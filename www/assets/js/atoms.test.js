/**
 * test - Test
 * @version v1.0.0
 * @link    http://tapquo.com
 * @author   ()
 * @license MIT
 */
(function(){"use strict";var __hasProp={}.hasOwnProperty,__extends=function(child,parent){function ctor(){this.constructor=child}for(var key in parent)__hasProp.call(parent,key)&&(child[key]=parent[key]);return ctor.prototype=parent.prototype,child.prototype=new ctor,child.__super__=parent.prototype,child},__bind=function(fn,me){return function(){return fn.apply(me,arguments)}};__.Entity.Task=function(_super){function Task(){return Task.__super__.constructor.apply(this,arguments)}return __extends(Task,_super),Task.fields("text","done"),Task.active=function(){return this.select(function(task){return!task.done})},Task.completed=function(){return this.select(function(task){return!!task.done})},Task}(Atoms.Class.Entity),Atoms.Atom.InputTask=function(_super){function InputTask(){this.onChange=__bind(this.onChange,this),InputTask.__super__.constructor.apply(this,arguments),this.el.on("keyup",this.onChange)}return __extends(InputTask,_super),InputTask.template='<input id="new-todo" type="text" placeholder="What needs to be done?" value="{{title}}" data-atom-input/>',InputTask.extend=!0,InputTask.prototype.onChange=function(event){return 13===event.keyCode&&this.value()?(__.Entity.Task.create({text:this.value(),done:!1}),this.clean()):void 0},InputTask}(Atoms.Atom.Input),Atoms.Atom.LiTask=function(_super){function LiTask(){return this.onDone=__bind(this.onDone,this),this.onDestroy=__bind(this.onDestroy,this),this.onChange=__bind(this.onChange,this),this.onEditing=__bind(this.onEditing,this),LiTask.__super__.constructor.apply(this,arguments)}return __extends(LiTask,_super),LiTask.template='<li class="{{#done}}completed{{/done}}">\n    <div class="view">\n        <input class="toggle" type="checkbox" {{#done}}checked{{/done}} />\n        <label>{{text}}</label>\n        <button class="destroy"></button>\n    </div>\n    <input class="edit" value="{{text}}" />\n</li>',LiTask.prototype._render=function(){return LiTask.__super__._render.apply(this,arguments),this.el.find("button").bind("touch",this.onDestroy),this.el.find(".toggle").bind("touch",this.onDone),this.el.find("div").bind("doubleTap",this.onEditing)},LiTask.prototype.onEditing=function(){return this.el.addClass("editing"),this.input=this.el.find(".edit"),this.input.on("keyup",this.onChange)},LiTask.prototype.onChange=function(event){return 13===event.keyCode&&this.input.val()?this.entity.updateAttributes({text:this.input.val()}):void 0},LiTask.prototype.onDestroy=function(){return this.entity.destroy()},LiTask.prototype.onDone=function(){return this.attributes.done=!this.entity.done,this.entity.updateAttributes({done:this.attributes.done})},LiTask}(Atoms.Atom.Li),Atoms.Molecule.ListTask=function(_super){function ListTask(){return ListTask.__super__.constructor.apply(this,arguments)}return __extends(ListTask,_super),ListTask.template='<ul id="todo-list" {{#if.style}}class="{{style}}"{{/if.style}}></ul>',ListTask["extends"]=!0,ListTask["default"]={id:"list",bind:{atom:"Atom.LiTask",entity:"__.Entity.Task",create:!0,update:!0}},ListTask}(Atoms.Molecule.List),Atoms.Organism.Footer=function(_super){function Footer(){this.showTasks=__bind(this.showTasks,this),this.onClear=__bind(this.onClear,this),this.onFilter=__bind(this.onFilter,this),this.reload=__bind(this.reload,this),this.onTaskDestroy=__bind(this.onTaskDestroy,this),Footer.__super__.constructor.apply(this,arguments),__.Entity.Task.bind("create",this.reload),__.Entity.Task.bind("update",this.reload),__.Entity.Task.bind("destroy",this.onTaskDestroy),this.reload()}return __extends(Footer,_super),Footer.template='<footer id="footer">\n  <span id="todo-count"><strong>{{active.toString()}}</strong> item left</span>\n  <div>\n     <ul id="filters">\n                <li>\n                    <a href="#/">All</a>\n                </li>\n                <li>\n                    <a href="#/active">Active</a>\n                </li>\n                <li>\n                    <a href="#/completed">Completed</a>\n                </li>\n            </ul>\n      <button id="clear-completed">Clear completed (<strong>{{completed.toString()}}</strong>)</button>\n    </div>\n</footer>',Footer["default"]={active:0,completed:0},Footer.prototype.onTaskDestroy=function(){return this.reload(),this.showTasks()},Footer.prototype._render=function(){return Footer.__super__._render.apply(this,arguments),this.filters=this.el.find("a"),this.filters.bind("touch",this.onFilter),this.filters.first().addClass("selected"),this.el.find("button").bind("touch",this.onClear)},Footer.prototype.reload=function(){return this.attributes.active=__.Entity.Task.active().length,this.attributes.completed=__.Entity.Task.completed().length,this.refresh()},Footer.prototype.onFilter=function(event){var el;return el=Atoms.$(event.currentTarget),el.addClass("selected").siblings("a").removeClass("selected"),this.showTasks(el.attr("href").replace("#/","")||"all")},Footer.prototype.onClear=function(){var task,_i,_len,_ref;for(_ref=__.Entity.Task.completed(),_i=0,_len=_ref.length;_len>_i;_i++)task=_ref[_i],task.destroy();return this.reload(),this.showTasks()},Footer.prototype.showTasks=function(filter){return this.filter=null!=filter?filter:"all",__.tasks.entity(__.Entity.Task[this.filter]())},Footer}(Atoms.Molecule.Div),Atoms.$(function(){return console.log("------------------------------------------------------------"),console.log("Atoms v"+Atoms.version+" (Atoms.App v"+Atoms.App.version+")"),console.log("------------------------------------------------------------"),Atoms.$("#new-todo").remove(),Atoms.$("#todo-list").remove(),Atoms.$("#footer").remove(""),new Atoms.Atom.InputTask({container:"header"}),__.tasks=new Atoms.Molecule.ListTask({container:"#main"}),new Atoms.Organism.Footer({container:"#todoapp"})})}).call(this);